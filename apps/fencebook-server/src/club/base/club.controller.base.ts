/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClubService } from "../club.service";
import { ClubCreateInput } from "./ClubCreateInput";
import { Club } from "./Club";
import { ClubFindManyArgs } from "./ClubFindManyArgs";
import { ClubWhereUniqueInput } from "./ClubWhereUniqueInput";
import { ClubUpdateInput } from "./ClubUpdateInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

export class ClubControllerBase {
  constructor(protected readonly service: ClubService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Club })
  async createClub(@common.Body() data: ClubCreateInput): Promise<Club> {
    return await this.service.createClub({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Club] })
  @ApiNestedQuery(ClubFindManyArgs)
  async clubs(@common.Req() request: Request): Promise<Club[]> {
    const args = plainToClass(ClubFindManyArgs, request.query);
    return this.service.clubs({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Club })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async club(
    @common.Param() params: ClubWhereUniqueInput
  ): Promise<Club | null> {
    const result = await this.service.club({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Club })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClub(
    @common.Param() params: ClubWhereUniqueInput,
    @common.Body() data: ClubUpdateInput
  ): Promise<Club | null> {
    try {
      return await this.service.updateClub({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Club })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClub(
    @common.Param() params: ClubWhereUniqueInput
  ): Promise<Club | null> {
    try {
      return await this.service.deleteClub({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: ClubWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        id: true,
        role: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  async connectUsers(
    @common.Param() params: ClubWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateClub({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  async updateUsers(
    @common.Param() params: ClubWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateClub({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  async disconnectUsers(
    @common.Param() params: ClubWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateClub({
      where: params,
      data,
      select: { id: true },
    });
  }
}
