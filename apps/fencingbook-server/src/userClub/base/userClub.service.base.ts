/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserClub as PrismaUserClub,
  Club as PrismaClub,
  User as PrismaUser,
} from "@prisma/client";

export class UserClubServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserClubCountArgs, "select">): Promise<number> {
    return this.prisma.userClub.count(args);
  }

  async userClubs(
    args: Prisma.UserClubFindManyArgs
  ): Promise<PrismaUserClub[]> {
    return this.prisma.userClub.findMany(args);
  }
  async userClub(
    args: Prisma.UserClubFindUniqueArgs
  ): Promise<PrismaUserClub | null> {
    return this.prisma.userClub.findUnique(args);
  }
  async createUserClub(
    args: Prisma.UserClubCreateArgs
  ): Promise<PrismaUserClub> {
    return this.prisma.userClub.create(args);
  }
  async updateUserClub(
    args: Prisma.UserClubUpdateArgs
  ): Promise<PrismaUserClub> {
    return this.prisma.userClub.update(args);
  }
  async deleteUserClub(
    args: Prisma.UserClubDeleteArgs
  ): Promise<PrismaUserClub> {
    return this.prisma.userClub.delete(args);
  }

  async getClub(parentId: string): Promise<PrismaClub | null> {
    return this.prisma.userClub
      .findUnique({
        where: { id: parentId },
      })
      .club();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userClub
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
