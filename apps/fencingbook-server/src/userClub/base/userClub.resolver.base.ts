/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserClub } from "./UserClub";
import { UserClubCountArgs } from "./UserClubCountArgs";
import { UserClubFindManyArgs } from "./UserClubFindManyArgs";
import { UserClubFindUniqueArgs } from "./UserClubFindUniqueArgs";
import { CreateUserClubArgs } from "./CreateUserClubArgs";
import { UpdateUserClubArgs } from "./UpdateUserClubArgs";
import { DeleteUserClubArgs } from "./DeleteUserClubArgs";
import { Club } from "../../club/base/Club";
import { User } from "../../user/base/User";
import { UserClubService } from "../userClub.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserClub)
export class UserClubResolverBase {
  constructor(
    protected readonly service: UserClubService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "read",
    possession: "any",
  })
  async _userClubsMeta(
    @graphql.Args() args: UserClubCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserClub])
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "read",
    possession: "any",
  })
  async userClubs(
    @graphql.Args() args: UserClubFindManyArgs
  ): Promise<UserClub[]> {
    return this.service.userClubs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserClub, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "read",
    possession: "own",
  })
  async userClub(
    @graphql.Args() args: UserClubFindUniqueArgs
  ): Promise<UserClub | null> {
    const result = await this.service.userClub(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserClub)
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "create",
    possession: "any",
  })
  async createUserClub(
    @graphql.Args() args: CreateUserClubArgs
  ): Promise<UserClub> {
    return await this.service.createUserClub({
      ...args,
      data: {
        ...args.data,

        club: args.data.club
          ? {
              connect: args.data.club,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserClub)
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "update",
    possession: "any",
  })
  async updateUserClub(
    @graphql.Args() args: UpdateUserClubArgs
  ): Promise<UserClub | null> {
    try {
      return await this.service.updateUserClub({
        ...args,
        data: {
          ...args.data,

          club: args.data.club
            ? {
                connect: args.data.club,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserClub)
  @nestAccessControl.UseRoles({
    resource: "UserClub",
    action: "delete",
    possession: "any",
  })
  async deleteUserClub(
    @graphql.Args() args: DeleteUserClubArgs
  ): Promise<UserClub | null> {
    try {
      return await this.service.deleteUserClub(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Club, {
    nullable: true,
    name: "club",
  })
  @nestAccessControl.UseRoles({
    resource: "Club",
    action: "read",
    possession: "any",
  })
  async getClub(@graphql.Parent() parent: UserClub): Promise<Club | null> {
    const result = await this.service.getClub(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: UserClub): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
