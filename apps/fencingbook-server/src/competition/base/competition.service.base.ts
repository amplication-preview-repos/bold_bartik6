/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Competition as PrismaCompetition } from "@prisma/client";

export class CompetitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompetitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.competition.count(args);
  }

  async competitions(
    args: Prisma.CompetitionFindManyArgs
  ): Promise<PrismaCompetition[]> {
    return this.prisma.competition.findMany(args);
  }
  async competition(
    args: Prisma.CompetitionFindUniqueArgs
  ): Promise<PrismaCompetition | null> {
    return this.prisma.competition.findUnique(args);
  }
  async createCompetition(
    args: Prisma.CompetitionCreateArgs
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.create(args);
  }
  async updateCompetition(
    args: Prisma.CompetitionUpdateArgs
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.update(args);
  }
  async deleteCompetition(
    args: Prisma.CompetitionDeleteArgs
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.delete(args);
  }
}
