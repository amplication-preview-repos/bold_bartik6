/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SportsHall } from "./SportsHall";
import { SportsHallCountArgs } from "./SportsHallCountArgs";
import { SportsHallFindManyArgs } from "./SportsHallFindManyArgs";
import { SportsHallFindUniqueArgs } from "./SportsHallFindUniqueArgs";
import { CreateSportsHallArgs } from "./CreateSportsHallArgs";
import { UpdateSportsHallArgs } from "./UpdateSportsHallArgs";
import { DeleteSportsHallArgs } from "./DeleteSportsHallArgs";
import { SportsHallService } from "../sportsHall.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SportsHall)
export class SportsHallResolverBase {
  constructor(
    protected readonly service: SportsHallService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "read",
    possession: "any",
  })
  async _sportsHallsMeta(
    @graphql.Args() args: SportsHallCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SportsHall])
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "read",
    possession: "any",
  })
  async sportsHalls(
    @graphql.Args() args: SportsHallFindManyArgs
  ): Promise<SportsHall[]> {
    return this.service.sportsHalls(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SportsHall, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "read",
    possession: "own",
  })
  async sportsHall(
    @graphql.Args() args: SportsHallFindUniqueArgs
  ): Promise<SportsHall | null> {
    const result = await this.service.sportsHall(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SportsHall)
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "create",
    possession: "any",
  })
  async createSportsHall(
    @graphql.Args() args: CreateSportsHallArgs
  ): Promise<SportsHall> {
    return await this.service.createSportsHall({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SportsHall)
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "update",
    possession: "any",
  })
  async updateSportsHall(
    @graphql.Args() args: UpdateSportsHallArgs
  ): Promise<SportsHall | null> {
    try {
      return await this.service.updateSportsHall({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SportsHall)
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "delete",
    possession: "any",
  })
  async deleteSportsHall(
    @graphql.Args() args: DeleteSportsHallArgs
  ): Promise<SportsHall | null> {
    try {
      return await this.service.deleteSportsHall(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
