/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SportsHallService } from "../sportsHall.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SportsHallCreateInput } from "./SportsHallCreateInput";
import { SportsHall } from "./SportsHall";
import { SportsHallFindManyArgs } from "./SportsHallFindManyArgs";
import { SportsHallWhereUniqueInput } from "./SportsHallWhereUniqueInput";
import { SportsHallUpdateInput } from "./SportsHallUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SportsHallControllerBase {
  constructor(
    protected readonly service: SportsHallService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SportsHall })
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSportsHall(
    @common.Body() data: SportsHallCreateInput
  ): Promise<SportsHall> {
    return await this.service.createSportsHall({
      data: data,
      select: {
        address: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        name: true,
        shortName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SportsHall] })
  @ApiNestedQuery(SportsHallFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sportsHalls(@common.Req() request: Request): Promise<SportsHall[]> {
    const args = plainToClass(SportsHallFindManyArgs, request.query);
    return this.service.sportsHalls({
      ...args,
      select: {
        address: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        name: true,
        shortName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SportsHall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sportsHall(
    @common.Param() params: SportsHallWhereUniqueInput
  ): Promise<SportsHall | null> {
    const result = await this.service.sportsHall({
      where: params,
      select: {
        address: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        name: true,
        shortName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SportsHall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSportsHall(
    @common.Param() params: SportsHallWhereUniqueInput,
    @common.Body() data: SportsHallUpdateInput
  ): Promise<SportsHall | null> {
    try {
      return await this.service.updateSportsHall({
        where: params,
        data: data,
        select: {
          address: true,
          city: true,
          country: true,
          createdAt: true,
          id: true,
          name: true,
          shortName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SportsHall })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SportsHall",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSportsHall(
    @common.Param() params: SportsHallWhereUniqueInput
  ): Promise<SportsHall | null> {
    try {
      return await this.service.deleteSportsHall({
        where: params,
        select: {
          address: true,
          city: true,
          country: true,
          createdAt: true,
          id: true,
          name: true,
          shortName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
